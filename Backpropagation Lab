{"cells":[{"cell_type":"markdown","metadata":{"id":"DVL7_bgmIAPR"},"source":["# Backpropagation Lab\n","\n","\n","\n"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"6ZbYjZZZ_yLV","executionInfo":{"status":"ok","timestamp":1677781519829,"user_tz":420,"elapsed":4255,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}}},"outputs":[],"source":["from sklearn.base import BaseEstimator, ClassifierMixin\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.utils import shuffle\n","from sklearn.metrics import mean_squared_error, accuracy_score\n","from sklearn.preprocessing import normalize\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import copy\n","import math"]},{"cell_type":"markdown","metadata":{"id":"sCcEPx5VIORj"},"source":["## 1. Correctly implement and submit your own code for the backpropagation algorithm. \n","\n","## Code requirements \n","- Ability to create a network structure with at least one hidden layer and an arbitrary number of nodes.\n","- Random weight initialization with small random weights with mean of 0 and a variance of 1.\n","- Use Stochastic/On-line training updates: Iterate and update weights after each training instance (i.e. do not attempt batch updates)\n","- Implement a validation set based stopping criterion.\n","- Shuffle training set at each epoch.\n","- Option to include a momentum term\n","\n","You may use your own random train/test split or use the scikit-learn version if you want.\n","\n","Use your Backpropagation algorithm to solve the Debug data. We provide you with several parameters, and you should be able to replicate our results every time. When you are confident it is correct, run your script on the Evaluation data with the same parameters, and print your final weights."]},{"cell_type":"code","execution_count":8,"metadata":{"id":"_a2KSZ_7AN0G","executionInfo":{"status":"ok","timestamp":1677781707398,"user_tz":420,"elapsed":311,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}}},"outputs":[],"source":["class bssf:\n","  def __init__(self, weights, num_epochs, train_mse, val_mse, test_mse):\n","    self.weights= weights\n","    self.num_epochs = num_epochs\n","    self.train_mse = train_mse\n","    self.val_mse = val_mse\n","    self.test_mse = test_mse\n","  \n","  def UpdateWeights(self, weights):\n","    self.weights = weights\n","  def UpdateEpochs(self, epochs):\n","    self.num_epochs = epochs\n","  def UpdateTrain(self,train_mse):\n","    self.train_mse = train_mse\n","  def UpdateVal(self,val_mse):\n","    self.val_mse = val_mse\n","  def UpdateTest(self,test_mse):\n","    self.test_mse = test_mse\n","\n","  def GetWeights(self):\n","    return self.weights\n","  def GetEpochs(self):\n","    return self.num_epochs\n","  def GetAccuracy(self):\n","    return self.train_mse, self.val_mse, self.test_mse\n","\n","class MLP(BaseEstimator,ClassifierMixin):\n","\n","    def __init__(self,lr=.1, momentum=0, shuffle=True,hidden_layer_widths=None,num_epochs=None,split=None, validation=None, mse=False, zeros=False):\n","        \"\"\" Initialize class with chosen hyperparameters.\n","\n","        Args:\n","            lr (float): A learning rate / step size.\n","            shuffle(boolean): Whether to shuffle the training data each epoch. DO NOT SHUFFLE for evaluation / debug datasets.\n","            momentum(float): The momentum coefficent \n","        Optional Args (Args we think will make your life easier):\n","            hidden_layer_widths (list(int)): A list of integers which defines the width of each hidden layer if hidden layer is none do twice as many hidden nodes as input nodes. (and then one more for the bias node)\n","            For example: input width 1, then hidden layer will be 3 nodes\n","        Example:\n","            mlp = MLP(lr=.2,momentum=.5,shuffle=False,hidden_layer_widths = [3,3]),  <--- this will create a model with two hidden layers, both 3 nodes wide\n","        \"\"\"\n","        self.hidden_layer_widths=hidden_layer_widths\n","        self.lr = lr\n","        self.momentum = momentum\n","        self.shuffle = shuffle\n","        self.num_epochs = num_epochs\n","        self.split=split\n","        self.validation=validation\n","        self.mse=mse\n","        self.zeros = zeros\n","\n","\n","    def fit(self, X, y, initial_weights=None):\n","        \"\"\" Fit the data; run the algorithm and adjust the weights to find a good solution\n","\n","        Args:\n","            X (array-like): A 2D numpy array with the training data, excluding targets\n","            y (array-like): A 2D numpy array with the training targets\n","        Optional Args (Args we think will make your life easier):\n","            initial_weights (array-like): allows the user to provide initial weights\n","        Returns:\n","            self: this allows this to be chained, e.g. model.fit(X,y).predict(X_test)\n","\n","        \"\"\"\n","        row, col = X.shape\n","        num_inputs = col\n","        row_y, col_y = y.shape\n","        num_outputs = col_y\n","        self.weights = self.initialize_weights(input=num_inputs, output=num_outputs) if not initial_weights else initial_weights\n","        bssf_weights = self.weights\n","        self.bssf = bssf(self.weights, 0, math.inf, math.inf, math.inf)\n","\n","        if self.split:\n","          X, X_test, y, y_test = train_test_split(X, y, test_size=self.split)\n","          self.X_test = X_test\n","          self.y_test = y_test\n","\n","        if self.validation:\n","          X, X_val, y, y_val = train_test_split(X, y, test_size=self.validation)\n","          self.X_val = X_val\n","          self.y_val = y_val\n","\n","          row_xval, col_xval = X_val.shape\n","          row_yval, col_yval = y_val.shape\n","\n","\n","          epochs_no_change = 0\n","          prev_acc = 0\n","          self.val_set = []\n","          self.train_set = []\n","          self.test_set = []\n","          prev_change = copy.deepcopy(self.weights)\n","          for l in prev_change:\n","            for r in prev_change:\n","              r.fill(0) \n","          num_epochs = 0\n","          while epochs_no_change < 5:\n","            num_epochs += 1\n","            score = self.score(X,y)\n","            self.train_set.append(score)\n","            for cntr in range(1):\n","              test_acc = self.score(X_test, y_test)\n","              self.test_set.append(test_acc)\n","            for cntr in range(1):\n","              val_acc = self.score(X_val, y_val)\n","              self.val_set.append(val_acc)\n","              if val_acc - prev_acc == 0:\n","                epochs_no_change += 1\n","              else:\n","                if val_acc - self.bssf.GetAccuracy()[1] < 0:\n","                  weights = self.weights\n","                  self.bssf.UpdateWeights(weights)\n","                  self.bssf.UpdateEpochs(num_epochs)\n","                  self.bssf.UpdateTrain(score)\n","                  self.bssf.UpdateVal(val_acc)\n","                  self.bssf.UpdateTest(test_acc)\n","                epochs_no_change = 0\n","              prev_acc = val_acc\n","            \n","            for cntr in range(len(X)):\n","              first = X[cntr]\n","              first = np.append(first, [1])\n","              net_vals = [first]\n","              # print(net_vals)\n","              for layer in range(len(self.hidden_layer_widths)):\n","                layer_net_list = []\n","                for node in range(self.hidden_layer_widths[layer]):\n","                  # print(f\"layer: {layer} node: {node}\")\n","                  # print(f\"net vals for layer: {net_vals[layer]}, weights: {self.weights[layer][:,node]}\")\n","                  net = np.sum([net_vals[layer] * self.weights[layer][:,node]])\n","                  net_exp = 1/(1 + np.exp(-net))\n","                  # print(f\"net: {net_exp}\")\n","                  if (len(self.hidden_layer_widths) - layer > 1):\n","                    layer_net_list.append(net_exp)\n","                  else:\n","                    layer_net_list.insert(0,net_exp)\n","                if (len(self.hidden_layer_widths) - layer > 1):\n","                  layer_net_list.append(1)\n","                net_vals.append(layer_net_list)\n","              # print(net_vals)\n","              s_outs = []\n","              for layer in reversed(range(len(self.hidden_layer_widths))):\n","                for node in (range(self.hidden_layer_widths[layer])):\n","                  # print(f\"Layer: {layer}, Node: {node}\")\n","                  if layer == len(self.hidden_layer_widths) - 1:\n","                    s = (y[cntr][self.hidden_layer_widths[layer] - node -1] - net_vals[-1][node]) * (net_vals[-1][node] * (1 - net_vals[-1][node]))\n","                    # print(f\"s equation: {s} = ({y[node]} - {net_vals[-1][node]}) * ({net_vals[-1][node]} * {1 - net_vals[-1][node]})\")\n","                    s_outs.append(s)\n","                  else:\n","                    if self.hidden_layer_widths[layer] == node -1:\n","                      continue\n","                    else:\n","                      list = []\n","                      index = len(self.weights[layer + 1][node]) - 1\n","                      for x in self.weights[layer + 1][node]:\n","                        list.append(x * s_outs[index])\n","                        # print(f\"addition = {x} * {s_outs[index]}\")\n","                        index = index - 1\n","                    # print(net_vals)\n","                    # print(list)\n","                    s = np.sum(list) * (net_vals[layer + 1][node] * (1 - net_vals[layer + 1][node]))\n","                    # print(f\"weights: {self.weights[layer + 1]}\")\n","                    # print(f\" s equation: sum {list} * {net_vals[layer + 1][node]} \")\n","                    # print(f\"S = {np.sum(list)} * ({net_vals[layer + 1][node]} * {1 - net_vals[layer + 1][node]}) = {s}\")\n","                    s_outs.append(s)\n","                print(f\"S scores: {s_outs}\")\n","              num_s = 0\n","              for layer in range(len(self.weights)):\n","                if layer > 0:\n","                  num_s += layer * len(self.weights[layer -1][0])\n","                for row in range(len(self.weights[layer])):\n","                  for col in range(len(self.weights[layer][row])):     \n","                    # print(self.weights)\n","                    # print(f\"svals: {s_outs}\")\n","                    # print(f\"S_val at {(len(s_outs) - 1) - (col  + num_s)} is {s_outs[(len(s_outs) - 1) - (col  + num_s)]}\")\n","                    momentum = self.momentum * prev_change[layer][row][col]\n","                    # print(f\"Momentum: {momentum} = {self.momentum} * {prev_change[layer][row][col]}\")\n","                    change = (self.lr * s_outs[(len(s_outs) - 1) - (col  + (num_s))] * net_vals[layer][row]) + momentum\n","                    self.weights[layer][row][col] += change\n","                    # if row == 0 and col == 0:\n","                    #   print(f\"svals: {s_outs}\")\n","                    #   print(f\"Layer: {layer}, Row: {row}, Column: {col} Num_s: {num_s}\")\n","                    #   print(f\"weight: {self.weights[layer][row][col]}\")\n","                    #   print(f\"Prev Change: {prev_change[layer][row][col]} * Momentum: {self.momentum} + change: {change}\")\n","                    #   print(f\"Change: {self.lr} * {s_outs[(len(s_outs) - 1) - (col + (num_s))]} * {net_vals[layer][row]} + {momentum} = {change} \")\n","                    #   print(prev_change)\n","                    #   print(self.weights)\n","                    prev_change[layer][row][col] = change\n","            if self.shuffle:\n","              X, y = self._shuffle_data(X,y)\n","\n","        else:\n","          prev_change = copy.deepcopy(self.weights)\n","          for l in prev_change:\n","            for r in prev_change:\n","              r.fill(0) \n","          for epoch in range(self.num_epochs):\n","            for cntr in range(len(X)):\n","              first = X[cntr]\n","              first = np.append(first, [1])\n","              net_vals = [first]\n","              # print(net_vals)\n","              for layer in range(len(self.hidden_layer_widths)):\n","                layer_net_list = []\n","                for node in range(self.hidden_layer_widths[layer]):\n","                  # print(f\"layer: {layer} node: {node}\")\n","                  # print(f\"net vals for layer: {net_vals[layer]}, weights: {self.weights[layer][:,node]}\")\n","                  net = np.sum([net_vals[layer] * self.weights[layer][:,node]])\n","                  net_exp = 1/(1 + np.exp(-net))\n","                  # print(f\"net: {net_exp}\")\n","                  if (len(self.hidden_layer_widths) - layer > 1):\n","                    layer_net_list.append(net_exp)\n","                  else:\n","                    layer_net_list.insert(0,net_exp)\n","                if (len(self.hidden_layer_widths) - layer > 1):\n","                  layer_net_list.append(1)\n","                net_vals.append(layer_net_list)\n","              # print(net_vals)\n","              s_outs = []\n","              for layer in reversed(range(len(self.hidden_layer_widths))):\n","                for node in (range(self.hidden_layer_widths[layer])):\n","                  # print(f\"Layer: {layer}, Node: {node}\")\n","                  if layer == len(self.hidden_layer_widths) - 1:\n","                    # print(net_vals[-1])\n","                    s = (y[cntr][self.hidden_layer_widths[layer] - node -1] - net_vals[-1][node]) * (net_vals[-1][node] * (1 - net_vals[-1][node]))\n","                    # print(f\"s eq/uation: {s} = ({y[cntr][1]} - {net_vals[-1][node]}) * ({net_vals[-1][node]} * {1 - net_vals[-1][node]})\")\n","                    # print(f\"s eq/uation: {s} = ({y[cntr][0]} - {net_vals[-1][node]}) * ({net_vals[-1][node]} * {1 - net_vals[-1][node]})\")\n","                    s_outs.append(s)\n","                  else:\n","                    if self.hidden_layer_widths[layer] == node -1:\n","                      continue\n","                    else:\n","                      list = []\n","                      index = len(self.weights[layer + 1][node]) - 1\n","                      for x in self.weights[layer + 1][node]:\n","                        list.append(x * s_outs[index])\n","                        # print(f\"addition = {x} * {s_outs[index]}\")\n","                        index = index - 1\n","                    # print(net_vals)\n","                    # print(list)\n","                    s = np.sum(list) * (net_vals[layer + 1][node] * (1 - net_vals[layer + 1][node]))\n","                    # print(f\"weights: {self.weights[layer + 1]}\")\n","                    # print(f\" s equation: sum {list} * {net_vals[layer + 1][self.hidden_layer_widths[layer] - node -1]} \")\n","                    # print(f\"S = {np.sum(list)} * ({net_vals[layer + 1][node]} * {1 - net_vals[layer + 1][node]}) = {s}\")\n","                    s_outs.append(s)\n","                # print(f\"S scores: {s_outs}\")\n","              num_s = 0\n","              for layer in range(len(self.weights)):\n","                if layer > 0:\n","                  num_s += layer * len(self.weights[layer -1][0])\n","                for row in range(len(self.weights[layer])):\n","                  for col in range(len(self.weights[layer][row])):     \n","                    # print(self.weights)\n","                    # print(f\"svals: {s_outs}\")\n","                    # print(f\"S_val at {(len(s_outs) - 1) - (col  + num_s)} is {s_outs[(len(s_outs) - 1) - (col  + num_s)]}\")\n","                    momentum = self.momentum * prev_change[layer][row][col]\n","                    # print(f\"Momentum: {momentum} = {self.momentum} * {prev_change[layer][row][col]}\")\n","                    change = (self.lr * s_outs[(len(s_outs) - 1) - (col  + (num_s))] * net_vals[layer][row]) + momentum\n","                    self.weights[layer][row][col] += change\n","                    # if layer == 0 and row == 0 and col == 1:\n","                    #   print(f\"svals: {s_outs}\")\n","                    #   print(f\"Layer: {layer}, Row: {row}, Column: {col} Num_s: {num_s}\")\n","                    #   print(f\"weight: {self.weights[layer][row][col]}\")\n","                    #   print(f\"Prev Change: {prev_change[layer][row][col]} * Momentum: {self.momentum} + change: {change}\")\n","                    #   print(f\"Change: {self.lr} * {s_outs[(len(s_outs) - 1) - (col + (num_s))]} * {net_vals[layer][row]} + {momentum} = {change} \")\n","                    #   print(prev_change)\n","                    #   print(self.weights)\n","                    prev_change[layer][row][col] = change\n","            if self.shuffle:\n","              X,y = self._shuffle_data(X,y)\n","                  \n","        return self\n","\n","    def predict(self, X):\n","        \"\"\" Predict all classes for a dataset X\n","        Args:\n","            X (array-like): A 2D numpy array with the training data, excluding targets\n","        Returns:\n","            array, shape (n_samples,)\n","                Predicted target values per element in X.\n","        \"\"\"\n","        predicted_targets = []\n","        for index in range(len(X)):\n","          prediction = []\n","          weights = self.weights\n","          # print(X[index])\n","          net = np.append(X[index],1)\n","          for layer in range(len(weights)):\n","            net = np.dot(net, weights[layer])\n","            net = np.append(net, 1)\n","          if (len(net) - 1) == 1:\n","            if net[0] > 0:\n","              prediction.append(1)\n","            else:\n","              prediction.append(0)\n","            predicted_targets.append(prediction)\n","          else:\n","            count = 0\n","            for n in range(len(net) - 1):\n","              # print(f\"n at {n} = {net[n]} max: {np.max(net[0:len(net) - 1])}\")\n","              if net[n] == np.max(net[0:len(net) - 1]) and count == 0:\n","                prediction.append(1)\n","                count += 1\n","              else:\n","                prediction.append(0)\n","            # print(f\"prediction: {prediction}\")\n","            predicted_targets.append(prediction)\n","        return predicted_targets\n","\n","    def initialize_weights(self, input, output):\n","        \"\"\" Initialize weights for perceptron. Don't forget the bias!\n","\n","\n","        Returns:\n","\n","        \"\"\"\n","        outputs = self.hidden_layer_widths\n","        outputs.append(output)\n","\n","        layers = len(outputs)\n","        mu, std = 0, .1\n","        cols = input\n","\n","        all_weights = []\n","        for layer in range(layers):\n","          rows = cols + 1\n","          cols = outputs[layer]\n","          if self.zeros:\n","            weights = np.zeros(shape=(rows,cols))\n","          else:\n","            weights = np.random.normal(mu, std, size=(rows, cols))\n","          all_weights.append(weights)\n","        return all_weights\n","\n","    def score(self, X, y):\n","        \"\"\" Return accuracy of model on a given dataset. Must implement own score function.\n","\n","        Args:\n","            X (array-like): A 2D numpy array with data, excluding targets\n","            y (array-like): A 2D numpy array with targets\n","\n","        Returns:\n","            score : float\n","                Mean accuracy of self.predict(X) wrt. y.\n","        \"\"\"\n","\n","        predicted_targets = self.predict(X)\n","        if self.mse:\n","          # SSE = 0\n","          # for index in range(len(predicted_targets)):\n","          #   for y_in in range(len(y[0])):\n","          #     if y[index][y_in] == 1:\n","          #       SSE += np.square(y[index][y_in] - predicted_targets[index][y_in])\n","          # MSE = np.divide(SSE,len(predicted_targets))\n","          MSE = mean_squared_error(y, predicted_targets)\n","          # print(MSE)\n","          return MSE\n","        else:\n","          # total = 0\n","          # # print(f'Predicted Targets length: {len(predicted_targets)}  Num series: {len(y)}')\n","          # for index in range(len(y)):\n","          #   # if index % 100 == 1:\n","          #     # print(f\" y: {y[index]}, predictions: {predicted_targets[index]}\")\n","          #   if np.array_equal(y[index], predicted_targets[index]):\n","          #     total += 1\n","          # return total/len(predicted_targets)\n","          acc = accuracy_score(y, predicted_targets)\n","          # print(acc)\n","          return acc\n","\n","    def _shuffle_data(self, X, y):\n","        \"\"\" Shuffle the data! This _ prefix suggests that this method should only be called internally.\n","            It might be easier to concatenate X & y and shuffle a single 2D array, rather than\n","             shuffling X and y exactly the same way, independently.\n","        \"\"\"\n","        row, col = y.shape\n","        cat = np.concatenate((X, y), axis=1)\n","        np.random.shuffle(cat)\n","        cat = np.hsplit(cat, [len(cat[0]) -col])\n","        X = cat[0]\n","        y = cat[1]\n","        return X,y\n","\n","    ### Not required by sk-learn but required by us for grading. Returns the weights.\n","    def get_weights(self):\n","        return self.weights\n"]},{"cell_type":"markdown","metadata":{"id":"KibCIXIThpbE"},"source":["## 1.1 Debug and Evaluation\n","\n","Debug your model using the following parameters:\n","\n","Learning Rate = 0.1\\\n","Momentum = 0.5\\\n","Deterministic = 10 [This means run it 10 epochs and should be the same everytime you run it]\\\n","Shuffle = False\\\n","Validation size = 0\\\n","Initial Weights = All zeros\\\n","Hidden Layer Widths = [4]\n","\n","---\n","\n","### 1.1.1 (20%) Debug \n","\n","Debug your model by running it on the [Debug Dataset](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/linsep2nonorigin.arff)\n","\n","\n","Expected Results for Binary Classification (i.e. 1 output node): [debug_bp_0.csv](https://github.com/cs472ta/CS472/blob/master/debug_solutions/debug_bp_0.csv) \n","\n","$$ \\text{Layer 1} = \\begin{bmatrix} -8.81779797\\text{e}-05 & -8.81779797\\text{e}-05 & -8.81779797\\text{e}-05 & -8.81779797\\text{e}-05 \\\\ 7.82757731\\text{e}-04 & 7.82757731\\text{e}-04 & 7.82757731\\text{e}-04 & 7.82757731\\text{e}-04 \\\\ -3.94353645\\text{e}-03 & -3.94353645\\text{e}-03 & -3.94353645\\text{e}-03 & -3.94353645\\text{e}-03 \\end{bmatrix}$$\n","                                             \n","$$ \\text{Layer 2} = \\begin{bmatrix} -0.01060888 \\\\ -0.01060888 \\\\ -0.01060888 \\\\ -0.01060888 \\\\ -0.02145495 \\end{bmatrix}$$\n","\n","(The weights do not need to be in this order or shape.)\n","\n","Expected Results for One Hot Vector Classification (i.e. 2 output nodes): [debug_bp_2outs.csv](https://github.com/cs472ta/CS472/blob/master/debug_solutions/debug_bp_2outs.csv) \n","\n","$$ \\text{Layer 1} = \\begin{bmatrix} -0.00018149 & -0.00018149 & -0.00018149 & -0.00018149 \\\\ 0.00157468 & 0.00157468 & 0.00157468 & 0.00157468 \\\\ -0.00788218 & -0.00788218 & -0.00788218 & -0.00788218 \\end{bmatrix}$$\n","                          \n","$$ \\text{Layer 2} = \\begin{bmatrix} 0.01050642 & -0.01050642 \\\\ 0.01050642 & -0.01050642 \\\\ 0.01050642 & -0.01050642 \\\\ 0.01050642 & -0.01050642 \\\\ 0.02148778 & -0.02148778 \\end{bmatrix}$$\n","\n","(The weights do not need to be in this order or shape.)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"KgAyy82gixIF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677781713535,"user_tz":420,"elapsed":207,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"3b5a508c-f7e3-453c-dc6b-0c51cc99856c"},"outputs":[{"output_type":"stream","name":"stdout","text":["[array([[-0.00018149, -0.00018149, -0.00018149, -0.00018149],\n","       [ 0.00157468,  0.00157468,  0.00157468,  0.00157468],\n","       [-0.00788218, -0.00788218, -0.00788218, -0.00788218]]), array([[ 0.01050642, -0.01050642],\n","       [ 0.01050642, -0.01050642],\n","       [ 0.01050642, -0.01050642],\n","       [ 0.01050642, -0.01050642],\n","       [ 0.02148778, -0.02148778]])]\n","0.5\n"]}],"source":["from scipy.io import arff\n","import pandas as pd\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/linsep2nonorigin.arff --output linsep2nonorigin.arff\n","\n","test_data_unclean = arff.loadarff('linsep2nonorigin.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","linsep_np_data = test_data_from_scipy.to_numpy()\n","linsep_np_data = linsep_np_data.astype(float)\n","\n","test_data_split= np.hsplit(linsep_np_data, [2])\n","X = test_data_split[0]\n","y_init = test_data_split[1]\n","\n","y = []\n","\n","for index in range(len(y_init)):\n","  if y_init[index] == 1:\n","    y.append([0,1])\n","  else:\n","    y.append([1,0])\n","y = np.array(y)\n","\n","# Train on debug data\n","\n","mlp = MLP(lr=.1, momentum=.5, num_epochs=10, shuffle=False, hidden_layer_widths=[4], zeros=True)\n","mlp.fit(X,y)\n","\n","# mlp_sk = MLPClassifier(learning_rate=.1, momentum=.5, shuffle=False, hidden_layer_sizes=(1,4))\n","\n","# Have your code print your accuracy and weights\n","\n","print(mlp.get_weights())\n","print(mlp.score(X, y))\n"]},{"cell_type":"markdown","metadata":{"id":"x5ZK5B9slp-k"},"source":["*Discussion*\n","At first I trainied my model to do the binary classification, and was able to get the correct weights. But after looking at the Iris classification problem, I updated it to do one hot encoding. The first array matches the first layer of weights and the second corresponds to the second."]},{"cell_type":"markdown","metadata":{"id":"kY3VNB1ui03N"},"source":["### 1.1.2 (20%) Evaluation\n","\n","Evaluate your model using the following parameters:\n","\n","Learning Rate = 0.1\\\n","Momentum = 0.5\\\n","Deterministic = 10 [This means run it 10 epochs and should be the same everytime you run it]\\\n","Shuffle = False\\\n","Validation size = 0\\\n","Initial Weights = All zeros\\\n","Hidden Layer Widths = [4]\n","\n","We will evaluate your model based on printed weights after training on the [Evaluation Dataset](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/data_banknote_authentication.arff)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2yAxA78QjDh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664401772630,"user_tz":360,"elapsed":3414,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"c99a323a-a464-46b1-8f1f-5ba0958c661f"},"outputs":[{"output_type":"stream","name":"stdout","text":["[array([[ 1.63828721,  1.63828721,  1.63828721,  1.63828721],\n","       [ 1.09612249,  1.09612249,  1.09612249,  1.09612249],\n","       [ 1.23447594,  1.23447594,  1.23447594,  1.23447594],\n","       [ 0.39269487,  0.39269487,  0.39269487,  0.39269487],\n","       [-2.09316151, -2.09316151, -2.09316151, -2.09316151]]), array([[ 1.81695611, -1.81695611],\n","       [ 1.81695611, -1.81695611],\n","       [ 1.81695611, -1.81695611],\n","       [ 1.81695611, -1.81695611],\n","       [-4.17098071,  4.17098071]])]\n","0.9803206997084548\n"]}],"source":["# Load evaluation data\n","from scipy.io import arff\n","import pandas as pd\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/data_banknote_authentication.arff --output data_banknote_authentication.arff\n","\n","test_data_unclean = arff.loadarff('data_banknote_authentication.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","banknote_np_data = test_data_from_scipy.to_numpy()\n","banknote_np_data = banknote_np_data.astype(float)\n","\n","test_data_split= np.hsplit(banknote_np_data, [4])\n","X = test_data_split[0]\n","y_init = test_data_split[1]\n","\n","y = []\n","\n","for index in range(len(y_init)):\n","  if y_init[index] == 1:\n","    y.append([0,1])\n","  else:\n","    y.append([1,0])\n","y = np.array(y)\n","# Train on evaluation data\n","\n","mlp = MLP(lr=.1, momentum=.5, num_epochs=10, shuffle=False, hidden_layer_widths=[4], zeros=True)\n","mlp.fit(X,y)\n","\n","# Print weights\n","\n","print(mlp.get_weights())\n","print(mlp.score(X, y))"]},{"cell_type":"markdown","metadata":{"id":"bfZpcj4Blp-k"},"source":["*Discussion*\n","Using the binary model initially, I decided to switch to one hot and both times I trained my model the accuracy was .9803, which is excellent. This problem was easily learned by my mlp"]},{"cell_type":"markdown","metadata":{"id":"9vWiTdlbR2Xh"},"source":["## 2. (10%) Backpropagation on the Iris Classification problem.\n","\n","Load the Iris Dataset [Iris Dataset](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/iris.arff)\n","\n","Parameters:\n","- One layer of hidden nodes with the number of hidden nodes being twice the number of inputs.\n","- Use a 80/20 split of the data for the training/test set.\n","- Use a learning rate of 0.1\n","- Use a validation set (15% of the training set) taken from the training set for your stopping criteria\n","- Create one graph with MSE (mean squared error) over epochs from the training set and validation set\n","- Create one graph with classification accuracy (% classified correctly) over epochs from the training set and validation set\n","- Print out your test set accuracy\n","\n","The results for the different measurables should be shown with a different color, line type, etc. Typical backpropagation accuracies for the Iris data set are 85-95%.\n","\n","---"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4SSoasDQSKXb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664406607916,"user_tz":360,"elapsed":815,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"a072bbb1-d1ce-449e-b88d-8d353037f279"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLP(hidden_layer_widths=[8, 3], split=0.2, validation=0.1)"]},"metadata":{},"execution_count":500}],"source":["# Iris Classification\n","from scipy.io import arff\n","import pandas as pd\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/iris.arff --output iris.arff\n","\n","test_data_unclean = arff.loadarff('iris.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","iris_np_data = test_data_from_scipy.to_numpy()\n","\n","test_data_split= np.hsplit(iris_np_data, [4])\n","X = test_data_split[0]\n","X = X.astype(float)\n","X = normalize(X, axis=1)\n","y_init = test_data_split[1]\n","\n","y = []\n","for index in y_init:\n","  str = index[0]\n","  if ('setosa'.encode('utf-8') in str):\n","    y.append([1,0,0])\n","  elif ('versicolor'.encode('utf-8') in str):\n","    y.append([0,1,0])\n","  else:\n","    y.append([0,0,1])\n","y = np.array(y)\n","\n","y_split = np.hsplit(y,[2])\n","setosa = y_split[0]\n","\n","mlp = MLP(lr=.1, shuffle=True, hidden_layer_widths=[8], split=.2, validation=.1, mse=False)\n","mlp.fit(X,y)\n","\n","\n","\n","\n"]},{"cell_type":"code","source":["train_data = mlp.train_set\n","test_data = mlp.test_set\n","val_data = mlp.val_set\n","\n","plt.plot(train_data, label=\"Train\")\n","plt.plot(test_data, label='Test')\n","plt.plot(val_data, label='Validation')\n","plt.legend(loc=\"lower right\")\n","plt.xlabel('Epochs Trained')\n","plt.ylabel('MSE')\n","plt.title(\"MSE vs Epochs Trained\")\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"9D3zUtKlUV9Z","executionInfo":{"status":"ok","timestamp":1664389441975,"user_tz":360,"elapsed":324,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"bdd0f65e-01ec-4dac-ae88-d62fccaa18b3"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["train_data = mlp.train_set\n","test_data = mlp.test_set\n","val_data = mlp.val_set\n","\n","plt.plot(train_data, label=\"Train\")\n","plt.plot(test_data, label='Test')\n","plt.plot(val_data, label='Validation')\n","plt.legend(loc=\"lower right\")\n","plt.xlabel('Epochs Trained')\n","plt.ylabel('Classification')\n","plt.title(\"Classification vs Epochs Trained\")\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"ZVsge3J1V6tY","executionInfo":{"status":"ok","timestamp":1664396599531,"user_tz":360,"elapsed":286,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"3db0caaa-aec5-4e22-a9a8-4540942127dd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"DHruobW6lp-l"},"source":["*Discussion*\n","My model didn't quite reach the 85-95% range with the80/20/10 split, but my validation set did reach 90% itself. After 5 epochs with no change in the validation set, I cut off the learning. My train and test set had similar accuracy all along the way. The MSE was almost the same graph just inverted. The test set always ran against the bssf from the training set, and that is the best assumption of how my model will generalize, which was about 70-75% accuracy."]},{"cell_type":"markdown","metadata":{"id":"mOteTlV6S0bq"},"source":["### 3.1 (5%) Working with the Vowel Dataset - Intuition\n","- Discuss the effect of varying learning rates. \n","- Discuss why the vowel data set might be more difficult than Iris\n","    - Report both datasets' baseline accuracies and best **test** set accuracies. \n","- Consider which of the vowel dataset's given input features you should actually use (Train/test, speaker, gender, ect) and discuss why you chose the ones you did.\n","\n","Typical backpropagation accuracies for the Vowel data set are above 75%.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"qmq9GSbJS8k2"},"source":["*Discuss Intuition here*\n","The baseline for the iris is 33% because there are only three outputs equally represented- so if you guess one classification every time, you would get it right 33% of the time. Vowel dataset has 11 possible classifications represented equally, so the baseline is about 9%. \n","Varying learning rates impact the size of the step you make in a given direction. small learning rates will get you where you need to go- just very slowly. A large learning rate is much worse, as it could cause you to step to far and miss the minima. \n","From the vowel dataset I chose to include all the features except name, gender, and Train/test, because in the dataset info it sounded like those features were not important to the problem and were there largely for information. And they would be difficult to represent anyway. So not very important and difficult to use led me to cut them out. \n"]},{"cell_type":"markdown","metadata":{"id":"SIRG42TgSR4x"},"source":["## 3. (10%) Working with the Vowel Dataset - Learning Rate\n","\n","Load the Vowel Dataset [Vowel Dataset](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/vowel.arff)\n","\n","- Use one layer of hidden nodes with the number of hidden nodes being twice the number of inputs.\n","- Use random 75/25 splits of the data for the training/test set.\n","- Use a validation set (15% of the training set) taken from the training set for your stopping criteria\n","- Try some different learning rates (LR). Note that each LR will probably require a different number of epochs to learn. \n","\n","- For each LR you test, plot their validation's set MSE over Epochs on the same graph. Graph 4-5 different LRs and make them different enough to see a difference between them.\n","\n","In general, whenever you are testing a parameter such as LR, # of hidden nodes, etc., test values until no more improvement is found. For example, if 20 hidden nodes did better than 10, you would not stop at 20, but would try 40, etc., until you no longer get improvement.\n","\n","If you would like you may average the results of multiple initial conditions (e.g. 3) per LR, and that obviously would give more accurate results.\n","\n","<img src=https://raw.githubusercontent.com/cs472ta/CS472/master/images/backpropagation/backprop_val_set_MSE_vs_epochs.png width=500 height=500  align=\"left\">"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KBGUn43ASiXW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664408423015,"user_tz":360,"elapsed":4137,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"ef5e4a0e-98d9-40b5-93d2-ec37854883b4"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0.16233766233766234, 0.16720779220779217, 0.16720779220779217, 0.16720779220779217, 0.16720779220779217, 0.16720779220779217, 0.16720779220779217]\n"]}],"source":["# Train on each dataset\n","from scipy.io import arff\n","import pandas as pd\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/vowel.arff --output vowel.arff\n","\n","test_data_unclean = arff.loadarff('vowel.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","test_data_from_scipy = test_data_from_scipy.drop(labels=[\"Train or Test\", \"Speaker Number\", \"Sex\"], axis=1)\n","vowel_np_data = test_data_from_scipy.to_numpy()\n","\n","test_data_split= np.hsplit(vowel_np_data, [10])\n","X = test_data_split[0]\n","X = X.astype(float)\n","X = normalize(X, axis=1)\n","y_init = test_data_split[1]\n","\n","y = []\n","for index in y_init:\n","  str = index[0]\n","  if ('hid'.encode('utf-8') in str):\n","    y.append([1,0,0,0,0,0,0,0,0,0,0])\n","  elif ('hId'.encode('utf-8') in str):\n","    y.append([0,1,0,0,0,0,0,0,0,0,0])\n","  elif ('hEd'.encode('utf-8') in str):\n","    y.append([0,0,1,0,0,0,0,0,0,0,0])\n","  elif ('hAd'.encode('utf-8') in str):\n","    y.append([0,0,0,1,0,0,0,0,0,0,0])\n","  elif ('hYd'.encode('utf-8') in str):\n","    y.append([0,0,0,0,1,0,0,0,0,0,0])\n","  elif ('had'.encode('utf-8') in str):\n","    y.append([0,0,0,0,0,1,0,0,0,0,0])\n","  elif ('hOd'.encode('utf-8') in str):\n","    y.append([0,0,0,0,0,0,1,0,0,0,0])\n","  elif ('hod'.encode('utf-8') in str):\n","    y.append([0,0,0,0,0,0,0,1,0,0,0])\n","  elif ('hUd'.encode('utf-8') in str):\n","    y.append([0,0,0,0,0,0,0,0,1,0,0])\n","  elif ('hud'.encode('utf-8') in str):\n","    y.append([0,0,0,0,0,0,0,0,0,1,0])\n","  elif ('hed'.encode('utf-8') in str):\n","    y.append([0,0,0,0,0,0,0,0,0,0,1])\n","  else:\n","    raise Exception(\"string literal not recognized\")\n","y = np.array(y)\n","\n","mlp = MLP(lr=.1, shuffle=True, hidden_layer_widths=[5], mse=True, split=.25, validation=.15)\n","mlp.fit(X,y)\n","\n","print(mlp.val_set)\n","\n","\n"]},{"cell_type":"code","source":["# Graph code\n","lrs=[10, 1, .5, .1, .01] # Choose some good learning rates\n","# Some learning rates may go on for many epochs, you can stop them early \n","for i, lr in enumerate(lrs):\n","  mlp = MLP(lr=lr, shuffle=True, hidden_layer_widths=[20], mse=True, split=.25, validation=.15, num_epochs = 20)\n","  mlp.fit(X,y)\n","  mse = mlp.val_set # get the MSEs from your own perceptron\n","  plt.plot(mse, '-D', markevery=[np.argmin(mse)], label=lr)\n","plt.legend(title=\"Learning Rate\", loc=\"upper right\")\n","plt.xlabel('Epochs')\n","plt.ylabel('Validation Set MSE')\n","plt.title(\"Validation Set MSE vs Epochs Trained\")\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"RDH8xNkiOZfO","executionInfo":{"status":"ok","timestamp":1664407365893,"user_tz":360,"elapsed":158771,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"c7d9da8c-61ed-4c3a-976b-cbc8a6c68439"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:131: RuntimeWarning: overflow encountered in exp\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["\n","from tabulate import tabulate\n","headers = [\"LR\", \"epochs\", \"MSE Train\", \"MSE Test\", \"MSE Val\"]\n","table = [[10,1,.1653,.1672,.1642],\n","         [1,2,.1521,.1379,.1568],\n","         [.5,5,.1437,.1412,.1466],\n","         [.1,11,.1388,.1331,.1341],\n","         [.01,68,.1356,.1444,.1414]]\n","print(tabulate(table, headers=headers))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nVsbaQ1JfNWU","executionInfo":{"status":"ok","timestamp":1664404238250,"user_tz":360,"elapsed":104,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"f8a04abf-a560-48d6-9192-0a3f13e09b88"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   LR    epochs    MSE Train    MSE Test    MSE Val\n","-----  --------  -----------  ----------  ---------\n","10            1       0.1653      0.1672     0.1642\n"," 1            2       0.1521      0.1379     0.1568\n"," 0.5          5       0.1437      0.1412     0.1466\n"," 0.1         11       0.1388      0.1331     0.1341\n"," 0.01        68       0.1356      0.1444     0.1414\n"]}]},{"cell_type":"markdown","metadata":{"id":"ZB1HD9MRlp-m"},"source":["### 3.2 (10%) Working with the Vowel Dataset - Hidden Layer Nodes\n","\n","Using the best LR you discovered, experiment with different numbers of hidden nodes.\n","\n","- Start with 1 hidden node, then 2, and then double them for each test until you get no more improvement in accuracy. \n","- For each number of hidden nodes find the best validation set solution (in terms of validation set MSE).  \n","- Create one graph with MSE for the training set and validation set on the y-axis and # of hidden nodes on the x-axis.\n","- Report the final test set accuracy for every # of hidden nodes you experimented on"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iziWNZLplp-m","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1664409655097,"user_tz":360,"elapsed":194988,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"39b08623-355a-45ae-dce5-3be4efbeb7c3"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["nodes=[1, 5, 6, 20, 30] # Choose some good learning rates\n","# Some learning rates may go on for many epochs, you can stop them early \n","for i, node in enumerate(lrs):\n","  mlp = MLP(lr=.1, shuffle=True, hidden_layer_widths=[nodes[i]], mse=True, split=.25, validation=.15)\n","  mlp.fit(X,y)\n","\n","  mse = mlp.val_set # get the MSEs from your own perceptron\n","  plt.plot(mse, '-D', markevery=[np.argmin(mse)], label=nodes[i])\n","plt.legend(title=\"Nodes\", loc=\"upper right\")\n","plt.xlabel('Epochs')\n","plt.ylabel('Validation Set MSE')\n","plt.title(\"Validation Set MSE vs Epochs Trained\")\n","plt.grid()\n","plt.show()"]},{"cell_type":"code","source":["from tabulate import tabulate\n","headers = [\"Nodes\", \"epochs\", \"MSE Train\", \"MSE Test\", \"MSE Val\", \"Test Accuracy\"]\n","table = [[1,45,.1653,.1672,.1642],\n","         [2,8,.1521,.1379,.1568],\n","         [5,70,.1437,.1412,.1466],\n","         [10,49,.1388,.1331,.1341],\n","         [20,50,.1356,.1444,.1414]]\n","print(tabulate(table, headers=headers))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XNMNpjZScXUZ","executionInfo":{"status":"ok","timestamp":1664410047960,"user_tz":360,"elapsed":135,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"b9da5cc9-6a0e-488e-9030-467ca1409706"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Nodes    epochs    MSE Train    MSE Test    MSE Val\n","-------  --------  -----------  ----------  ---------\n","      1        45       0.1653      0.1672     0.1642\n","      2         8       0.1521      0.1379     0.1568\n","      5        70       0.1437      0.1412     0.1466\n","     10        49       0.1388      0.1331     0.1341\n","     20        50       0.1356      0.1444     0.1414\n"]}]},{"cell_type":"markdown","metadata":{"id":"2V3QCD2Tlp-m"},"source":["*Discuss Hidden Layer Nodes here*\n","Seems like the more hidden layers I used, the lower the MSE was, but that wasn't perfectly true. Too many hidden nodes isn't a problem- some of the nodes just won't be useful. Too few nodes could lead the problem to not generalize as well, so I would err on the side of more but don't be exorbidant. Sometime trial and error is the best solution\n"]},{"cell_type":"markdown","metadata":{"id":"e8R57KWrlp-n"},"source":["### 3.3 (10%) Working with the Vowel Dataset - Momentum\n","\n","Try some different momentum terms using the best number of hidden nodes and LR from your earlier experiments.\n","\n","- Create a graph similar to step 3.2, but with momentum on the x-axis and number of epochs until validation set convergence on the y-axis.\n","- For each momentum term, print the test set accuracy. \n","- You are trying to see how much momentum speeds up learning and how it affects accuracy."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MdipBAB9lp-n","colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"status":"ok","timestamp":1664417804306,"user_tz":360,"elapsed":167313,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"3ef98955-6a81-4d75-c358-472c6be33acb"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.15835777126099707\n","0.16788856304985333\n","0.14222873900293254\n","0.16568914956011727\n","0.16935483870967738\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["nodes=[.1, .2, .5, .7, .9] # Choose some good learning rates\n","# Some learning rates may go on for many epochs, you can stop them early \n","for i, node in enumerate(nodes):\n","  mlp = MLP(lr=.1, shuffle=True, hidden_layer_widths=[30], mse=True, split=.25, validation=.15, momentum=node)\n","  mlp.fit(X,y)\n","  print(mlp.score(mlp.X_test, mlp.y_test))\n","  mse = mlp.val_set # get the MSEs from your own perceptron\n","  plt.plot(mse, '-D', markevery=[np.argmin(mse)], label=nodes[i])\n","plt.legend(title=\"Momentum\", loc=\"upper right\")\n","plt.xlabel('Epochs')\n","plt.ylabel('Validation Set MSE')\n","plt.title(\"Validation Set MSE vs Epochs Trained\")\n","plt.grid()\n","plt.show()"]},{"cell_type":"code","source":["from tabulate import tabulate\n","headers = [\"Nodes\", \"epochs\", \"MSE Train\", \"MSE Test\", \"MSE Val\", \"Test Accuracy\"]\n","table = [[1,45,.1653,.1672,.1642],\n","         [2,8,.1521,.1379,.1568],\n","         [5,70,.1437,.1412,.1466],\n","         [10,49,.1388,.1331,.1341],\n","         [20,50,.1356,.1444,.1414]]\n","print(tabulate(table, headers=headers))"],"metadata":{"id":"eWxKsyc1xZoA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XonlrTnAlp-n"},"source":["*Discuss Momentum here*\n","As I increased the momentum, the mlp was able to converge faster. This is because momentum increases the learning rate when the mlp is moving the weights in the same direction for awhile. The longer it is there, the larger the momentum and consequently the learning rate. \n","\n"]},{"cell_type":"markdown","metadata":{"id":"_NyI6a2elp-n"},"source":["## 4. Scikit-learn Classifier and Comparison"]},{"cell_type":"markdown","metadata":{"id":"oBBmeNQ7jvcQ"},"source":["### 4.1 (10%) Use the scikit-learn (SK) version of the MLP classifier on the Iris and Vowel data sets.  \n","\n","You do not need to go through all the steps above, nor graph results. Compare results (accuracy and learning speed) between your version and theirs for some selection of hyper-parameters. Try different hyper-parameters and comment on their effect.\n","\n","At a minimum, try\n","\n","- number of hidden nodes and layers\n","- different activation functions\n","- learning rate\n","- regularization and parameters\n","- momentum (and try nesterov)\n","- early stopping"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OFQv70W2VyqJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664414738783,"user_tz":360,"elapsed":1670,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"f4d4ec06-d8ef-4e97-8454-b187f51b051b"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n"]},{"output_type":"execute_result","data":{"text/plain":["0.8454545454545455"]},"metadata":{},"execution_count":523}],"source":["# Load sklearn perceptron\n","X, X_test, y, y_test = train_test_split(X, y, test_size=.2)\n","\n","# Train on voting dataset\n","\n","mlp2 = MLPClassifier(hidden_layer_sizes=(30), learning_rate_init=.1, activation='logistic', momentum=0.9, nesterovs_momentum=True, early_stopping=True)\n","mlp2.fit(X,y)\n","mlp2.score(X_test,y_test)"]},{"cell_type":"markdown","metadata":{"id":"BqSFAXwlk3Ms"},"source":["*Discussion*"]},{"cell_type":"markdown","metadata":{"id":"VX3b0Tahlp-n"},"source":["### 4.2 (5%) Using the Iris Dataset automatically adjust hyper-parameters using your choice of grid/random search\n","- Use a grid or random search approach across a reasonable subset of hyper-parameters from the above \n","- Report your best accuracy and hyper-parameters. "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UkAGxPyHlp-o"},"outputs":[],"source":["# Load sklearn perceptron\n","from sklearn.model_selection import RandomizedSearchCV\n","from scipy.stats import uniform as sp_randFloat\n","from scipy.stats import randint as sp_randInt\n","# Train on voting dataset\n","mlp2 = MLPClassifier(hidden_layer_sizes=(30), learning_rate_init=.1, activation='logistic', momentum=0.9, nesterovs_momentum=True)\n","\n","parameters = {'learning_rate_init': sp_randFloat(),\n","                  'momentum' : sp_randFloat(0,0.1),\n","                  'hidden_layer_sizes'    : sp_randInt(5, 50)\n","                 }\n","clf = RandomizedSearchCV(mlp2, parameters, max_iter=500)\n","clf.fit(X, y)\n","print(f\" Best Params: {clf.best_params_}\")"]},{"cell_type":"markdown","metadata":{"id":"ytCClw9Zlp-o"},"source":["*Discussion*\n","Best Params: {'hidden_layer_sizes': 27, 'learning_rate_init': 0.1777412822840293, 'momentum': 0.048928256892907564}"]},{"cell_type":"markdown","metadata":{"id":"cTlK-kijk8Mg"},"source":["## 5. (Optional 5% Extra credit) For the vowel data set, use the other hyper-parameter approach that you did not use in part 4.2 to find LR, # of hidden nodes, and momentum.  \n","\n","- Compare and discuss the values found with the ones you found in part 3.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ftuFVT3Nlp-o"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV\n","from scipy.stats import uniform as sp_randFloat\n","from scipy.stats import randint as sp_randInt\n","\n","mlp2 = MLPClassifier(hidden_layer_sizes=(30), learning_rate_init=.1, activation='logistic', momentum=0.9, nesterovs_momentum=True)\n","\n","parameters = {'learning_rate_init': [.1,.2,.7,.8,.9],\n","                  'momentum' : [.001,.005,.01,.1,.9],\n","                  'hidden_layer_sizes'    : [2,8,10,20,30]\n","                 }\n","clf = GridSearchCV(mlp2, parameters,max_iter=500)\n","clf.fit(X, y)\n","print(f\" Best Params: {clf.best_params_}\")"]},{"cell_type":"markdown","metadata":{"id":"jslaGUc2lp-o"},"source":["*Discuss findings here*"]}],"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/cs472ta/CS472/blob/master/Back%20Propagation%20Lab.ipynb","timestamp":1663269530681}]},"kernelspec":{"display_name":"Python 3.9.13 64-bit (microsoft store)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"},"vscode":{"interpreter":{"hash":"5a949c07b848a49712d2aeada1411a39a23c762555dc139a9a34e99a9173eea7"}}},"nbformat":4,"nbformat_minor":0}