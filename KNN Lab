{"cells":[{"cell_type":"markdown","metadata":{"id":"DVL7_bgmIAPR"},"source":["# K-Nearest Neighbor Lab\n","\n","\n","\n"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"6ZbYjZZZ_yLV","executionInfo":{"status":"ok","timestamp":1666884707252,"user_tz":360,"elapsed":858,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}}},"outputs":[],"source":["from sklearn.base import BaseEstimator, ClassifierMixin\n","from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\n","from statistics import mode, median\n","from sklearn.metrics import accuracy_score, mean_squared_error\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"sCcEPx5VIORj"},"source":["## 1. Implement the k-nearest neighbor (KNN) algorithm\n","\n","### Code requirements\n","- Use Euclidean distance to decide closest neighbors\n","- Implement both the regular (classifcation) version and the regression version\n","- Include optional distance weighting for both algorithms"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"_a2KSZ_7AN0G","executionInfo":{"status":"ok","timestamp":1666822936554,"user_tz":360,"elapsed":182,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}}},"outputs":[],"source":["\n","class KNNClassifier(BaseEstimator,ClassifierMixin):\n","    def __init__(self, columntype=[], weight_type='inverse_distance', regression=False): ## add parameters here\n","        \"\"\"\n","        Args:\n","            columntype for each column tells you if continues[real] or if nominal[categoritcal].\n","            weight_type: inverse_distance voting or if non distance weighting. Options = [\"no_weight\",\"inverse_distance\"]\n","        \"\"\"\n","        self.columntype = columntype #Note This won't be needed until part 5\n","        self.weight_type = weight_type\n","        self.regression = regression\n","\n","    def fit(self, data, labels):\n","        \"\"\" Fit the data; run the algorithm (for this lab really just saves the data :D)\n","        Args:\n","            X (array-like): A 2D numpy array with the training data, excluding targets\n","            y (array-like): A 2D numpy array with the training targets\n","        Returns:\n","            self: this allows this to be chained, e.g. model.fit(X,y).predict(X_test)\n","        \"\"\"\n","        self.num_instances, self.num_attributes = data.shape\n","        self.data = data\n","        self.labels = labels\n","        self.labels_range = len(set(labels))\n","        return self\n","    \n","    def predict(self, data, k=3):\n","        \"\"\" Predict all classes for a dataset X\n","        Args:\n","            X (array-like): A 2D numpy array with the training data, excluding targets\n","        Returns:\n","            array, shape (n_samples,)\n","                Predicted target values per element in X.\n","        \"\"\"\n","        predictions = []\n","        row_cntr = 0\n","        for row in data:\n","          cntr = 0\n","          dists = []\n","          knn = []\n","          for series in self.data:\n","            euclid = 0\n","            for s in range(len(series)):\n","              if(type(series[s]) != float):\n","                print(type(series[s]))\n","                print(type(row[s]))\n","                if series[s] != row[s]:\n","                  euclid += 1\n","              else:\n","                euclid += (series[s] - row[s]) ** 2\n","            euclid = euclid**0.5\n","            # if(row_cntr == 1):\n","            #   print(euclid)\n","            #   print(knn)\n","            #   print(dists)\n","            if len(knn) < k:\n","              dists.append(euclid)\n","              dists.sort()\n","              knn.insert(dists.index(euclid),self.labels[cntr])\n","            else:\n","              if euclid < dists[np.argmax(dists)]:\n","                index = np.argmax(dists)\n","                dists.pop(index)\n","                dists.append(euclid)\n","                dists.sort()\n","                knn.pop(index)\n","                knn.insert(dists.index(euclid),self.labels[cntr])\n","               \n","            cntr += 1\n","          row_cntr += 1\n","          if self.regression:\n","            if self.weight_type == 'inverse_distance':\n","              div_sum = 0\n","              divisor = 0\n","              for nn in range(len(knn)):\n","                if(dists[nn] == 0):\n","                  \n","                  div_sum += (knn[nn])\n","                  divisor += 1\n","                else:\n","                  div_sum += knn[nn]/(dists[nn] **2)\n","                  divisor += 1/(dists[nn] ** 2)\n","                  \n","              predictions.append((div_sum/divisor))\n","            else:\n","              predictions.append(np.mean(knn))\n","          elif self.weight_type == 'inverse_distance':\n","            score_vec = [0] * self.labels_range\n","            count = 0\n","            for nn in knn:\n","              score_vec[int(nn)] += 1/(dists[count] **2)\n","              count += 1\n","            # print(f\"Scores: {score_vec}\")\n","            # print(f\"outputs: {knn}\")\n","            # print(f\"distances: {dists}\")\n","            # print(f\"cont: {count}\")\n","            # print(f\"prediction: {np.argmax(score_vec)}\")\n","            predictions.append(np.argmax(score_vec))\n","          else:\n","            flag = len(set(knn)) == len(knn) and len(knn) > 1\n","            if flag:\n","              predictions.append(knn[1])\n","            else:\n","              predictions.append(mode(knn))\n","        return predictions\n","\n","    #Returns the Mean score given input data and labels\n","    def score(self, X, y, metric='accuracy', k=3):\n","        \"\"\" Return accuracy of model on a given dataset. Must implement own score function.\n","        Args:\n","            X (array-like): A 2D numpy array with data, excluding targets\n","            y (array-like): A 2D numpy array with targets\n","        Returns:\n","            score : float\n","                Mean accuracy of self.predict(X) wrt. y.\n","        \"\"\"\n","        y_hat = self.predict(X, k)\n","        if metric == 'accuracy':\n","          acc = accuracy_score(y, y_hat)\n","        else:\n","          acc = mean_squared_error(y, y_hat)\n","        return acc\n","    "]},{"cell_type":"markdown","metadata":{"id":"f2xGh1DNFRF_"},"source":["## Debug and Evaluation\n","\n","Debug and Evaluate your model using the parameters below:\n","- Use distance weighting\n","- KNN = 3 (three nearest neighbors)\n","- Donâ€™t normalize the data\n","- Use Euclidean Distance\n","---\n","\n","### 1.1 (20%) Debug using this [training set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/glass_train.arff) and this [test set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/glass_test.arff)\n","\n","Expected Results:\n","- Not using inverse weighted distancing = roughly [68.29%]\n","- Link to [debug solution](https://github.com/cs472ta/CS472/blob/master/debug_solutions/glass_no_inv_predictions.txt)\n","- Using inverse weighted distancing = roughly [74.39%]\n","- Link to [debug solution](https://github.com/cs472ta/CS472/blob/master/debug_solutions/glass_inv_predictions.txt)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mZFCV7-6FRF_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666725748304,"user_tz":360,"elapsed":479,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"82cfcb67-aad3-47e0-c64c-5f9ae3bb30db"},"outputs":[{"output_type":"stream","name":"stdout","text":["No Weight: 0.6829268292682927\n","Inverse Distance Weight: 0.7439024390243902\n"]}],"source":["# Load glass data\n","# Train on training set\n","# Predict on test set\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder, LabelEncoder\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/glass_train.arff --output glass_train.arff\n","\n","train_data_unclean = arff.loadarff('glass_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","glass_train_np_data = train_data_from_scipy.to_numpy()\n","\n","train_data_split= np.hsplit(glass_train_np_data, [9])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/glass_test.arff --output glass_test.arff\n","\n","test_data_unclean = arff.loadarff('glass_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","glass_test_np_data = test_data_from_scipy.to_numpy()\n","\n","\n","test_data_split= np.hsplit(glass_test_np_data, [9])\n","X_test = test_data_split[0]\n","y_test = np.array(test_data_split[1])\n","encoded_y_test = encoder.fit_transform(y_test)\n","\n","clf =  KNNClassifier(weight_type=\"no_weight\")\n","clf2 =  KNNClassifier()\n","clf.fit(X,encoded_y.reshape(1,-1)[0])\n","clf2.fit(X,encoded_y.reshape(1,-1)[0])\n","\n","print(f'No Weight: {clf.score(X_test, encoded_y_test.reshape(1,-1)[0])}')\n","print(f'Inverse Distance Weight: {clf2.score(X_test, encoded_y_test.reshape(1,-1)[0])}')\n"]},{"cell_type":"markdown","metadata":{"id":"hzVbWGSFFRGA"},"source":["### 1.2 (20%) Evaluate\n","\n","We will evaluate your model based on its performance on the [diabetes](https://archive.ics.uci.edu/ml/datasets/Diabetes) problem.\n","- Use this [training set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/diabetes_train.arff) and this [test set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/diabetes_test.arff) and have your code print the accuracy."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M6bqBPsAFRGA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666580740687,"user_tz":360,"elapsed":23648,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"d7db372a-e191-408b-d127-bd575832b262"},"outputs":[{"output_type":"stream","name":"stdout","text":["No Weight: 0.8411458333333334\n","Inverse Distance Weight: 0.890625\n"]}],"source":["# Load diabetes data\n","# Train on training set\n","# Predict on test set\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder, LabelEncoder\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/diabetes_train.arff --output diabetes_train.arff\n","\n","train_data_unclean = arff.loadarff('diabetes_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","diabetes_train_np_data = train_data_from_scipy.to_numpy()\n","\n","train_data_split= np.hsplit(diabetes_train_np_data, [8])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/diabetes_test.arff --output diabetes_test.arff\n","\n","test_data_unclean = arff.loadarff('diabetes_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","diabetes_test_np_data = test_data_from_scipy.to_numpy()\n","\n","\n","test_data_split= np.hsplit(diabetes_test_np_data, [8])\n","X_test = test_data_split[0]\n","y_test = np.array(test_data_split[1])\n","encoded_y_test = encoder.fit_transform(y_test)\n","\n","clf =  KNNClassifier(weight_type=\"no_weight\")\n","clf2 =  KNNClassifier()\n","clf.fit(X,encoded_y.reshape(1,-1)[0])\n","clf2.fit(X,encoded_y.reshape(1,-1)[0])\n","\n","print(f'No Weight: {clf.score(X_test, encoded_y_test.reshape(1,-1)[0])}')\n","print(f'Inverse Distance Weight: {clf2.score(X_test, encoded_y_test.reshape(1,-1)[0])}')\n"]},{"cell_type":"markdown","metadata":{"id":"9vWiTdlbR2Xh"},"source":["## 2. KNN with and without normalization\n","\n","- Use the [magic telescope](http://archive.ics.uci.edu/ml/datasets/MAGIC+Gamma+Telescope) task with this [training set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_train.arff) and this [test set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_test.arff) \n","\n","### 2.1 (5%)\n","- Try it with k=3 and without distance weighting and *without* normalization\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4SSoasDQSKXb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666585033004,"user_tz":360,"elapsed":1696180,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"4028d85b-3688-41b5-a776-c8c4305bf296"},"outputs":[{"output_type":"stream","name":"stdout","text":["No Weight: 0.8082808280828083\n"]}],"source":["# Load magic telescope data\n","# Train/Predict without normalization\n","# Load diabetes data\n","# Train on training set\n","# Predict on test set\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder, LabelEncoder\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_train.arff --output magic_train.arff\n","\n","train_data_unclean = arff.loadarff('magic_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","magic_train_np_data = train_data_from_scipy.to_numpy()\n","\n","train_data_split= np.hsplit(magic_train_np_data, [10])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_test.arff --output magic_test.arff\n","\n","test_data_unclean = arff.loadarff('magic_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","magic_test_np_data = test_data_from_scipy.to_numpy()\n","\n","\n","test_data_split= np.hsplit(magic_test_np_data, [10])\n","X_test = np.array(test_data_split[0])\n","y_test = np.array(test_data_split[1])\n","encoded_y_test = encoder.fit_transform(y_test)\n","\n","clf =  KNNClassifier(weight_type=\"no_weight\")\n","clf.fit(X,encoded_y.reshape(1,-1)[0])\n","\n","print(f'No Weight: {clf.score(X_test, encoded_y_test.reshape(1,-1)[0])}')"]},{"cell_type":"markdown","metadata":{"id":"bbyTnpE6FRGB"},"source":["### 2.2 (5%)\n","- Try it with k=3 without distance weighting and *with* normalization (input features normalized between 0 and 1). Use the normalization formula (x-xmin)/(xmax-xmin)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YKtjxbJhFRGC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666728759520,"user_tz":360,"elapsed":1025562,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"cc4bea23-cdf4-4a25-be8b-b0df5594bd75"},"outputs":[{"output_type":"stream","name":"stdout","text":["No Weight: 0.8141314131413141\n"]}],"source":["# Train/Predict with normalization\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder, LabelEncoder\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_train.arff --output magic_train.arff\n","\n","train_data_unclean = arff.loadarff('magic_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","magic_train_y = train_data_from_scipy.iloc[:,-1]\n","magic_train_x = train_data_from_scipy.drop(train_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_train_x = magic_train_x.astype('float32')\n","normalized_magic_train = magic_train_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_train_np_data = np.append(normalized_magic_train.to_numpy(), magic_train_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","\n","train_data_split= np.hsplit(magic_train_np_data, [10])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_test.arff --output magic_test.arff\n","\n","test_data_unclean = arff.loadarff('magic_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","magic_test_y = test_data_from_scipy.iloc[:,-1]\n","magic_test_x = test_data_from_scipy.drop(test_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_test_x = magic_test_x.astype('float32')\n","normalized_magic_test = magic_test_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_test_np_data = np.append(normalized_magic_test.to_numpy(), magic_test_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","test_data_split= np.hsplit(magic_test_np_data, [10])\n","X_test = np.array(test_data_split[0])\n","y_test = np.array(test_data_split[1])\n","encoded_y_test = encoder.fit_transform(y_test)\n","\n","clf =  KNNClassifier(weight_type=\"no_weight\")\n","clf.fit(X,encoded_y.reshape(1,-1)[0])\n","\n","print(f'No Weight: {clf.score(X_test, encoded_y_test.reshape(1,-1)[0])}')\n"]},{"cell_type":"markdown","metadata":{"id":"nagw-kNRFRGC"},"source":["Normalizing the data improved the accuracy. Especially with methods like knn, normalizing the data is important to make sure that one input doesn't dominate the output. Just because the magnitude of the feature is much larger than another feature doesn't mean it is more important in explaining the model than the other. Normalization is a technique that forces the model to learn all the features regardless of magnitude. "]},{"cell_type":"markdown","metadata":{"id":"4bwX_akTFRGC"},"source":["### 2.3 (5%)\n","\n","- Using your normalized data, create one graph with classification accuracy on the test set on the y-axis and k values on the x-axis. \n","    - Use odd values of k from 1 to 15.\n","- As a rough sanity check, typical knn accuracies for the magic telescope data set are 75-85%"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UYjWlKwyFRGC","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1666759783023,"user_tz":360,"elapsed":8424324,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"5793be74-b96f-474e-a880-0b2ad7f38c1b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Train/Predict with normalization using k=1,3,...,15\n","# Graph classification accuracy over k\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_train.arff --output magic_train.arff\n","\n","train_data_unclean = arff.loadarff('magic_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","magic_train_y = train_data_from_scipy.iloc[:,-1]\n","magic_train_x = train_data_from_scipy.drop(train_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_train_x = magic_train_x.astype('float32')\n","normalized_magic_train = magic_train_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_train_np_data = np.append(normalized_magic_train.to_numpy(), magic_train_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","\n","train_data_split= np.hsplit(magic_train_np_data, [10])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_test.arff --output magic_test.arff\n","\n","test_data_unclean = arff.loadarff('magic_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","magic_test_y = test_data_from_scipy.iloc[:,-1]\n","magic_test_x = test_data_from_scipy.drop(test_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_test_x = magic_test_x.astype('float32')\n","normalized_magic_test = magic_test_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_test_np_data = np.append(normalized_magic_test.to_numpy(), magic_test_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","test_data_split= np.hsplit(magic_test_np_data, [10])\n","X_test = test_data_split[0]\n","y_test = np.array(test_data_split[1])\n","encoded_y_test = encoder.fit_transform(y_test)\n","\n","accs = []\n","k_list = [1,3,5,7,9,11,13,15]\n","clf =  KNNClassifier(weight_type='no_weight')\n","\n","for k in k_list:\n","  clf.fit(X,encoded_y.reshape(1,-1)[0])\n","  accs.append(clf.score(X_test, encoded_y_test.reshape(1,-1)[0], k=k))\n","\n","\n","plt.plot(k_list, accs)\n","plt.xlabel('k')\n","plt.ylabel('Classification Accuracy')\n","plt.title(\"Accuracy vs. k Nearest Neighbors\")\n","plt.grid()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"gHkAts_PFRGD"},"source":["*For the rest of the experiments use only normalized data*"]},{"cell_type":"markdown","metadata":{"id":"SIRG42TgSR4x"},"source":["## 3. (10%) KNN regression\n","\n","- Use the regression variation of your algorithm (without distance weighting) on the [housing price prediction](https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html) problem.  Use this [training set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/housing_train.arff) and this [test set](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/housing_test.arff). Note this data set has an example of an inappropriate use of data which we will discuss.\n","- Use Mean Square Error (MSE) on the test set as your accuracy metric for this case\n","    - Do not normalize regression output values\n","- Graph MSE on the test set with odd values of k from 1 to 15"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KBGUn43ASiXW","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1666720445941,"user_tz":360,"elapsed":5173,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"b9a193dc-ee42-44a2-b5f0-9f1d78af3c33"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Load housing price prediction data\n","# Train/Predict using k=1,3,...,15\n","# Graph MSE over k\n","# Train/Predict with normalization using k=1,3,...,15\n","# Graph classification accuracy over k\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder\n","from sklearn.neighbors import KNeighborsRegressor\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/housing_train.arff --output housing_train.arff\n","\n","train_data_unclean = arff.loadarff('housing_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","housing_train_y = train_data_from_scipy.iloc[:,-1]\n","housing_train_x = train_data_from_scipy.drop(train_data_from_scipy.iloc[:, 12:13], axis=1)\n","housing_train_x = housing_train_x.astype('float32')\n","normalized_housing_train = housing_train_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","housing_train_np_data = np.append(normalized_housing_train.to_numpy(), housing_train_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","\n","train_data_split= np.hsplit(housing_train_np_data, [13])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/housing_test.arff --output housing_test.arff\n","\n","test_data_unclean = arff.loadarff('housing_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","housing_test_y = test_data_from_scipy.iloc[:,-1]\n","housing_test_x = test_data_from_scipy.drop(test_data_from_scipy.iloc[:, 12:13], axis=1)\n","housing_test_x = housing_test_x.astype('float32')\n","normalized_housing_test = housing_test_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","housing_test_np_data = np.append(normalized_housing_test.to_numpy(), housing_test_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","test_data_split= np.hsplit(housing_test_np_data, [13])\n","X_test = test_data_split[0]\n","y_test = np.array(test_data_split[1])\n","\n","accs = []\n","k_list = [1,3,5,7,9,11,13,15]\n","clf =  KNNClassifier(weight_type=\"no_weight\", regression=True)\n","\n","for k in k_list:\n","  clf.fit(X,y.reshape(1,-1)[0])\n","  accs.append(clf.score(X_test, y_test.reshape(1,-1)[0], k=k, metric='mse'))\n","\n","\n","plt.plot(k_list, accs)\n","plt.xlabel('k')\n","plt.ylabel('Regression MSE')\n","plt.title(\"k Nearest Neighbors vs MSE\")\n","plt.grid()\n","plt.show()\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"v19fpixqTe-7"},"source":["## 4. KNN with distance weighting\n","- Repeat your experiments for magic telescope and housing using distance-weighted (inverse of distance squared) voting and discuss your results."]},{"cell_type":"markdown","metadata":{"id":"yd80DKAWFRGE"},"source":["### 4.1 (7.5%) Magic Telescope Dataset"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"ZCPFUAGTS2sX","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1666830111572,"user_tz":360,"elapsed":5828539,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"2a64e734-e83a-495d-9740-4a21ae6703be"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Train/Predict magic telescope using distance-weighted voting\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_train.arff --output magic_train.arff\n","\n","train_data_unclean = arff.loadarff('magic_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","magic_train_y = train_data_from_scipy.iloc[:,-1]\n","magic_train_x = train_data_from_scipy.drop(train_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_train_x = magic_train_x.astype('float32')\n","normalized_magic_train = magic_train_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_train_np_data = np.append(normalized_magic_train.to_numpy(), magic_train_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","\n","train_data_split= np.hsplit(magic_train_np_data, [10])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_test.arff --output magic_test.arff\n","\n","test_data_unclean = arff.loadarff('magic_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","magic_test_y = test_data_from_scipy.iloc[:,-1]\n","magic_test_x = test_data_from_scipy.drop(test_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_test_x = magic_test_x.astype('float32')\n","normalized_magic_test = magic_test_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_test_np_data = np.append(normalized_magic_test.to_numpy(), magic_test_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","test_data_split= np.hsplit(magic_test_np_data, [10])\n","X_test = test_data_split[0]\n","y_test = np.array(test_data_split[1])\n","encoded_y_test = encoder.fit_transform(y_test)\n","\n","accs = []\n","k_list = [1,3,5,7,9,11,13,15]\n","clf =  KNNClassifier(weight_type='inverse_distance')\n","\n","for k in k_list:\n","  clf.fit(X,encoded_y.reshape(1,-1)[0])\n","  accs.append(clf.score(X_test, encoded_y_test.reshape(1,-1)[0], k=k))\n","\n","\n","plt.plot(k_list, accs)\n","plt.xlabel('k')\n","plt.ylabel('Classification Accuracy')\n","plt.title(\"Accuracy vs. k Nearest Neighbors\")\n","plt.grid()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"vkNSTfzuFRGE"},"source":["### 4.2 (7.5%) Housing Dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pBvky0uzFRGE","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1666720430019,"user_tz":360,"elapsed":4727,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"0845fa83-7237-4cfb-82c4-e4d5592b67e6"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Train/Predict housing using distance-weighted voting\n","# Load housing price prediction data\n","# Train/Predict using k=1,3,...,15\n","# Graph MSE over k\n","# Train/Predict with normalization using k=1,3,...,15\n","# Graph classification accuracy over k\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/housing_train.arff --output housing_train.arff\n","\n","train_data_unclean = arff.loadarff('housing_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","housing_train_y = train_data_from_scipy.iloc[:,-1]\n","housing_train_x = train_data_from_scipy.drop(train_data_from_scipy.iloc[:, 12:13], axis=1)\n","housing_train_x = housing_train_x.astype('float32')\n","normalized_housing_train = housing_train_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","housing_train_np_data = np.append(normalized_housing_train.to_numpy(), housing_train_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","\n","train_data_split= np.hsplit(housing_train_np_data, [13])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/housing_test.arff --output housing_test.arff\n","\n","test_data_unclean = arff.loadarff('housing_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","housing_test_y = test_data_from_scipy.iloc[:,-1]\n","housing_test_x = test_data_from_scipy.drop(test_data_from_scipy.iloc[:, 12:13], axis=1)\n","housing_test_x = housing_test_x.astype('float32')\n","normalized_housing_test = housing_test_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","housing_test_np_data = np.append(normalized_housing_test.to_numpy(), housing_test_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","test_data_split= np.hsplit(housing_test_np_data, [13])\n","X_test = test_data_split[0]\n","y_test = np.array(test_data_split[1])\n","\n","accs = []\n","k_list = [1,3,5,7,9,11,13,15]\n","clf =  KNNClassifier(weight_type=\"inverse_distance\", regression=True)\n","\n","for k in k_list:\n","  clf.fit(X, y.reshape(1,-1)[0])\n","  accs.append(clf.score(X_test, y_test.reshape(1,-1)[0], k=k, metric='mse'))\n","\n","plt.plot(k_list, accs)\n","plt.xlabel('k')\n","plt.ylabel('Regression MSE')\n","plt.title(\"k Nearest Neighbors vs MSE\")\n","plt.grid()\n","plt.show()\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"AZYmqjC6FRGF"},"source":["The inverse distance performed better than the no distance metric. UNiform distance metric can cause issues when the very closest class is A but the next two are B, even when the next closest neighbors are far away. Including the distance metric weakens their votes and makes sure that the more sure you are of a neighbor, the more of a vote it gets."]},{"cell_type":"markdown","metadata":{"id":"p31bcCnvFRGF"},"source":["## 5. (10%) KNN with nominal and unknown data\n","\n","- Use the [credit-approval](https://archive.ics.uci.edu/ml/datasets/Credit+Approval) task and this [dataset](https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/credit_approval.arff)\n","    - Use a 70/30 split of the data for the training/test set\n","- Note that this set has both continuous and nominal attributes, together with donâ€™t know values. \n","- Implement and justify a distance metric which supports continuous, nominal, and donâ€™t know attribute values\n","    - You need to handle don't knows with the distance metric, not by imputing a value.\n","    - More information on distance metrics can be found [here](https://www.jair.org/index.php/jair/article/view/10182/24168).\n","- Use your own choice for k.\n","- As a rough sanity check, typical knn accuracies for the credit data set are 70-80%."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mLIfdWC6FRGF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666721783931,"user_tz":360,"elapsed":3617,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"015684bd-4e0d-47a1-c0fc-4f3e08b23e73"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8260869565217391"]},"metadata":{},"execution_count":207}],"source":["# Load dataset and split into train/test sets\n","# Train/Predict credit-approval\n","# Train/Predict housing using distance-weighted voting\n","# Load housing price prediction data\n","# Train/Predict using k=1,3,...,15\n","# Graph MSE over k\n","# Train/Predict with normalization using k=1,3,...,15\n","# Graph classification accuracy over k\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/credit_approval.arff --output credit_train.arff\n","\n","train_data_unclean = arff.loadarff('credit_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","\n","train_data_split= np.hsplit(train_data_from_scipy, [15])\n","X = np.array(train_data_split[0])\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","X_train, X_test, y_train, y_test = train_test_split(X,encoded_y, test_size=.3)\n","\n","clf =  KNNClassifier(weight_type=\"inverse_distance\")\n","clf.fit(X_train, y_train.reshape(1,-1)[0])\n","\n","clf.score(X_test, y_test)"]},{"cell_type":"markdown","metadata":{"id":"oVEYxJ8UFRGG"},"source":["I used the simple method of 0 if the nominal values are the same (includng unknown) and 1 if the are not. Its not the most clever solution, but it is easy to use and importantly it makes very few assumptions. It is really difficult to say how different 'red' and 'blue' are. There are some tricks to guess or make good assumptions, but just giving all different values the same distance is consistent and makes few assumptions. If they are the same, they are on top of each other and get 0 distance. This method performed well- 83% accuracy on novel data is pretty confident."]},{"cell_type":"markdown","metadata":{"id":"oBBmeNQ7jvcQ"},"source":["## 6. (10%) Scikit-Learn KNN \n","- Use the scikit-learn KNN version on magic telescope and housing and compare your results\n","- Try out different hyperparameters to see how well you can do. "]},{"cell_type":"code","execution_count":3,"metadata":{"id":"OFQv70W2VyqJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666884757822,"user_tz":360,"elapsed":1687,"user":{"displayName":"Tade Davis","userId":"14229488086641410854"}},"outputId":"c3b11ca7-5a8a-4396-baab-f29ebdc19231"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.8378337833783378\n"]}],"source":["# Train/Predict magic telescope using scikit's KNN\n","# Train/Predict housing using scikit's KNN\n","from scipy.io import arff\n","import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder\n","from sklearn.neighbors import KNeighborsRegressor\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_train.arff --output magic_train.arff\n","\n","train_data_unclean = arff.loadarff('magic_train.arff')\n","train_data_from_scipy = pd.DataFrame(train_data_unclean[0])\n","magic_train_y = train_data_from_scipy.iloc[:,-1]\n","magic_train_x = train_data_from_scipy.drop(train_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_train_x = magic_train_x.astype('float32')\n","normalized_magic_train = magic_train_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_train_np_data = np.append(normalized_magic_train.to_numpy(), magic_train_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","\n","train_data_split= np.hsplit(magic_train_np_data, [10])\n","X = train_data_split[0]\n","y = np.array(train_data_split[1])\n","encoder = OrdinalEncoder()\n","encoded_y = encoder.fit_transform(y)\n","\n","# !curl https://raw.githubusercontent.com/cs472ta/CS472/master/datasets/magic_telescope_test.arff --output magic_test.arff\n","\n","test_data_unclean = arff.loadarff('magic_test.arff')\n","test_data_from_scipy = pd.DataFrame(test_data_unclean[0])\n","magic_test_y = test_data_from_scipy.iloc[:,-1]\n","magic_test_x = test_data_from_scipy.drop(test_data_from_scipy.iloc[:, 10:11], axis=1)\n","magic_test_x = magic_test_x.astype('float32')\n","normalized_magic_test = magic_test_x.apply(lambda iterator: ((iterator - iterator.min())/(iterator.max() - iterator.min())).round(2))\n","magic_test_np_data = np.append(normalized_magic_test.to_numpy(), magic_test_y.to_numpy().reshape(-1,1), 1)\n","\n","\n","test_data_split= np.hsplit(magic_test_np_data, [10])\n","X_test = test_data_split[0]\n","y_test = np.array(test_data_split[1])\n","encoded_y_test = encoder.fit_transform(y_test)\n","\n","clf =  KNeighborsClassifier(n_neighbors=10, weights='distance', metric='cityblock')\n","clf.fit(X, encoded_y.reshape(1,-1)[0])\n","print(clf.score(X_test, encoded_y_test.reshape(1,-1)[0]))"]},{"cell_type":"markdown","metadata":{"id":"BqSFAXwlk3Ms"},"source":["*Report your comparison*\n","Using all the same hyperparameters, I got the same accuracy as the sci kit learn mode. However, there are some unique algoritms that the scikit model has that improved the accuracy. ball_tree and kd_tree. I am not sure how the differs from the brute force algorithm used in this lab. I tried some different distance metrics, including manhattan, which got similar accurac though did not perform quite as well as the standard euclidean. "]},{"cell_type":"markdown","metadata":{"id":"cTlK-kijk8Mg"},"source":["## 7. (optional 5% extra credit): Reducing the data set\n","- Choose either of the data sets above and use the best k value you found.\n","- Implement a reduction algorithm that removes data points in some rational way such that performance does not drop too drastically on the test set given the reduced training set.\n","- Compare your performance on the test set for the reduced and non-reduced versions and give the number (and percentage) of training examples removed from the original training set. \n","    - Note that performance for magic telescope is classification accuracy and for housing it is mean squared error.\n","    - Magic Telescope has about 12,000 instances and if you use a leave one out style of testing for your data set reduction, then your algorithm will run slow since that is n^2 at each step.\n","        - If you wish, you may use a random subset of 2,000 of the magic telescope instances.\n","    - More information on reduction techniques can be found [here](http://axon.cs.byu.edu/~martinez/classes/478/slides/IBL.pdf)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dR14hSmIFRGH"},"outputs":[],"source":["# Code here"]},{"cell_type":"markdown","metadata":{"id":"uM4vdr0wFRGH"},"source":["Discussion. How well did it do?"]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"https://github.com/cs472ta/CS472/blob/master/KNN%20Lab.ipynb","timestamp":1666398387472}]},"kernelspec":{"display_name":"Python 3.10.7 64-bit","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.7"},"vscode":{"interpreter":{"hash":"aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"}},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}